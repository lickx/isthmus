#!/usr/bin/env bash
# Original code by Dave Coyle (http://coyled.com)
# Tweaks by Gwyneth Llewelyn (http://gwynethllewelyn.net/)
# Total overhaul by lickx (https://github.com/lickx)

# Requires bash 4

# Get the root folder of the isthmus tree
export OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
REGIONS_DIR="${OPENSIM_DIR}/etc/sims-enabled"

# We create this lock file when needing to suspend the watchdog
MONITOR_LOCK="${OPENSIM_DIR}/var/simauto.lock"

# Install isthmus config file if not already there, and then source it
if [ ! -f "${OPENSIM_DIR}/etc/isthmus.conf" ]; then
    cp "${OPENSIM_DIR}/share/common/etc/isthmus.conf" "${OPENSIM_DIR}/etc"
fi
source "${OPENSIM_DIR}/etc/isthmus.conf"

export ISTHMUS_HOSTNAME

export DOTNET_CLI_TELEMETRY_OPTOUT=1

show_help() {
    echo -e "`basename $0` - Control opensim simulators\n"
    echo "start <simname>     Start a simulator"
    echo "stop <simname>      Stop and deregister from the map"
    echo "kill <simname>      Stop by sending SIGHUP (leaves ghost tile on worldmap)"
    echo "alert <simname> \"This is an alert\"    Send an inworld alert msg"
    echo "restart <simname>   Issues a stop, then start command"
    echo "bluebox <simname> \"This is a warning\" <seconds>  Stop after an inworld warning"
    echo "backup <simname>    Ensure database is saved"
    echo "saveoar <simname>   Saves region contents to an .oar archive"
    echo "enable <simname>    Enable a sim"
    echo "disable <simname>   Disable a sim"
    echo "zap <simname>       Delete region contents and turn the maptile into water"
    echo "maptile <simname>   Generate a new maptile (can take a while)"
    echo "delete-maptile <simname>   Delete the maptile"
    echo "status (simname)    Returns online status (all if no parameter)"
    echo "list (enabled|available)  List enabled (default) or available sims"
}

do_log() {
    touch "${OPENSIM_DIR}/var/log/isthmus.log"
    logline="`date --iso-8601=seconds` - simctl - $1"
    echo "${logline}" >> "${OPENSIM_DIR}/var/log/isthmus.log"
}

check_user() {
    if [ `whoami` == 'root' ]; then
        echo "Refusing to run as root"
        exit 1
    fi
}

is_running() {
    SCREENPID=`${SCREEN} -ls ${SIM} | grep -P "${SIM}\t" | cut -f1 -d'.' | sed 's/W//g'`
    if [ "${SCREENPID}" != "" ]; then
        return 0
    else
        return 1
    fi
}

get_status() {
    if is_running; then
        if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
            tcp_port=`cat ${OPENSIM_DIR}/var/ports/${SIM}.port`
            echo "${SIM} - online (${tcp_port})"
        else
            echo "${SIM} - online"
        fi
        exit 1
    else
        echo "${SIM} - offline"
        exit 0 
    fi
}

findfreeport() {
    for (( port=${PORT_RANGE_START}; port<=${PORT_RANGE_END}; port++ ))
    do
        grep -q ${port} ${OPENSIM_DIR}/var/ports/* 2&> /dev/null
        if [ $? -ne 0 ]; then
            echo ${port}
            return
        fi
    done
    echo ${PORT_RANGE_START}
}

setup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    REGION_INIFILE="${OPENSIM_DIR}/etc/sims-available/${SIM}.ini" 

    if [ ! -r "${REGION_INIFILE}" ]; then
        echo "[ ${SIM} ] Does not exist within this isthmus"
        exit
    fi

    REGION_UUID=`grep RegionUUID "${REGION_INIFILE}" | cut -d"=" -f2 | xargs`

    # No idea why these are written in runtime/bin and not var/maptiles :S
    # Not good in the case the runtime would be on a read-only mount.
    REGION_MAPTILE="${OPENSIM_DIR}/runtime/bin/MAP-${REGION_UUID}.png"

    mkdir -p "${OPENSIM_DIR}/var/log"
    export ISTHMUS_LOGFILE="${OPENSIM_DIR}/var/log/${SIM}.log"

    mkdir -p "${OPENSIM_DIR}/var/pid/sims"
    export ISTHMUS_PIDFILE="${OPENSIM_DIR}/var/pid/sims/${SIM}.pid"

    mkdir -p "${OPENSIM_DIR}/var/ports"
    if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
        ISTHMUS_PORT=`cat ${OPENSIM_DIR}/var/ports/${SIM}.port`
    else
        ISTHMUS_PORT=$(findfreeport)
    fi
    export ISTHMUS_PORT
    export REGION_LOAD_DIR="${OPENSIM_DIR}/var/Regions/${SIM}"
}

do_start() {
    if [ ! -r "${REGIONS_DIR}/${SIM}.ini" ]; then
        echo "[${SIM}] Not enabled or does not exist"
        exit 1
    fi

    if is_running; then
        echo "[${SIM}] Already started"
        exit 1
    fi

    if [ -d "${OPENSIM_DIR}/etc/robust.d" ]; then
        ./robust status 99main > /dev/null
        if [ $? == 0 ]; then
            echo "Robust is not running"
            exit
        fi
    fi

    # Change UDP region port to match TCP sim port
    sed -i --follow-symlinks -e "s/InternalPort.*/InternalPort = ${ISTHMUS_PORT}/" "${REGIONS_DIR}/${SIM}.ini"

    # Change external hostname
    sed -i --follow-symlinks -e "s/ExternalHostName.*/ExternalHostName = SYSTEMIP/" "${REGIONS_DIR}/${SIM}.ini"

    # Copy region ini to its own temp RegionDir
    mkdir -p "${REGION_LOAD_DIR}"
    ln -sf "${REGIONS_DIR}/${SIM}.ini" "${REGION_LOAD_DIR}/${SIM}.ini"

    export LANG=C
    ulimit -n 4096 -s 1048576
    cd "${OPENSIM_DIR}/runtime/bin" && ${SCREEN} -S ${SIM} -d -m -l \
        ./OpenSim -inifile="${OPENSIM_DIR}/share/system/opensim.ini"

    echo -n "[${SIM}] Starting"
    STARTTIME=0
    while :
    do
        sleep 5
        STARTTIME=$((STARTTIME + 5))
        echo -n "."
        if is_running; then
            echo "${ISTHMUS_PORT}" > "${OPENSIM_DIR}/var/ports/${SIM}.port"
            echo " started"
            if [ ! -r "${REGION_MAPTILE}" ]; then
                echo -n "[${SIM}] Generating initial map tile in 15 seconds.."
                sleep 15
                do_maptile ${SIM}
                echo "done"
            fi
            exit 0
        elif [ ${STARTTIME} -ge 30 ]; then
            echo " Failed. Disabling sim!"
            do_log "[${SIM}] Has problems with starting. Disabling sim!"
            cd "${OPENSIM_DIR}/bin"
            ./simctl disable ${SIM}
            exit 1
        fi
    done

}

do_kill() {
    if is_running; then
        # Send backup command and wait 1 minute
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nbackup"
        sleep 60
        if [ -f "${ISTHMUS_PIDFILE}" ]; then
            kill -9 `cat ${ISTHMUS_PIDFILE}`
            rm "${ISTHMUS_PIDFILE}"
            if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
                rm "${OPENSIM_DIR}/var/ports/${SIM}.port"
            fi
            if [ -d "${REGION_LOAD_DIR}" ]; then
                rm -r "${REGION_LOAD_DIR}"
            fi
            echo "[${SIM}] Killed"
        fi
    fi
}

do_stop() {
    if is_running; then
        echo -n "[${SIM}] Stopping"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nquit"
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running; then
                if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
                    rm "${OPENSIM_DIR}/var/ports/${SIM}.port"
                fi
                echo " stopped"
                # OpenSim sometimes doesn't clear up PID file
                if [ -f "${ISTHMUS_PIDFILE}" ]; then
                    rm "${ISTHMUS_PIDFILE}"
                fi
                if [ -d "${REGION_LOAD_DIR}" ]; then
                    rm -r "${REGION_LOAD_DIR}"
                fi
                return 0
            elif [ ${STOPTIME} -ge 120 ]; then
                echo " killing"
                do_kill ${SIM}
                do_log "[${SIM}] Took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${SIM}] Not running"
        return 1
    fi 
}

do_alert() {
    if is_running; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nalert $1"
    else
        echo "${SIM} not running"
    fi
}

do_bluebox() {
    if is_running; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nregion restart bluebox \"$1\" $2"
        echo -n "[${SIM}] Scheduled for stopping in $2 seconds"
        sleep $2
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running; then
                if [ -f "${OPENSIM_DIR}/var/ports/${SIM}.port" ]; then
                    rm "${OPENSIM_DIR}/var/ports/${SIM}.port"
                fi
                echo " stopped"
                return 0
            elif [ ${STOPTIME} -ge 120 ]; then
                echo " killing"
                do_kill ${SIM}
                do_log "[${SIM}] Took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${SIM}] not running"
    fi
}

do_backup() {
    if is_running; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "backup"
    else
        echo "${SIM} not running"
    fi
}

# do_saveoar (oarpath)
# Saves oars for region in simulator
# If no oarpath specified, use default var/backup/yyyy-mm-dd
do_saveoar() {
    if [ "$1" == "" ]; then
        LOCAL_OAR_PATH="${OPENSIM_DIR}/var/backup/`date -I'date'`"
    else
        LOCAL_OAR_PATH=$1
    fi

    mkdir -p "${LOCAL_OAR_PATH}"

    if is_running; then
        # Alert inworld about temporary degraded performance"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nalert \"SYSTEM NOTICE: Region backup in progress. Performance might be a bit slower for a few minutes..\""
        sleep 3

        OAR_FILE="${LOCAL_OAR_PATH}/${SIM}-`date -I'date'`.oar"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nsave oar ${OAR_OPTIONS} \"${OAR_FILE}\""
        sleep 120
    fi
}

do_list() {
    if [ "$1" == "" ]; then
        WHAT="enabled"
    else
        WHAT=$1
    fi
    for simulator in ${OPENSIM_DIR}/etc/sims-${WHAT}/*; do
        simname=`basename ${simulator} .ini`
        setup ${simname}
        if is_running; then
            echo "${simname} - online"
        else
            echo "${simname} - offline"
        fi
    done;
}

do_enable() {
    if [ ! -r "${OPENSIM_DIR}/etc/sims-available/${SIM}.ini" ]; then
        echo "${SIM}: No such sim"
        return 1
    fi

    if [ -r "${REGIONS_DIR}/${SIM}.ini" ]; then
        echo "${SIM}: Already enabled"
        return 1
    fi

    cd "${OPENSIM_DIR}/etc/sims-enabled"
    ln -s "../sims-available/${SIM}.ini"
}

do_disable() {
    if [ ! -r "${OPENSIM_DIR}/etc/sims-available/${SIM}.ini" ]; then
        echo "[${SIM}]: No such sim"
        return 1
    fi

    if [ -r "${REGIONS_DIR}/${SIM}.ini" ]; then
        rm "${REGIONS_DIR}/${SIM}.ini"
        return 0
    else
        echo "[${SIM}] Already disabled"
        return 1
    fi
}

do_zap() {
    if is_running; then
        echo "Deleting all objects..."
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "delete object name --regex \"\""
        sleep 5
        echo "Deleting terrain and generating 'void' map tile"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "terrain fill 0"
        sleep 3
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "generate map tile"
        echo "Done, use 'simdel ${SIM}' to remove the sim and region entirely"
    else
        echo "${SIM} not running"
    fi
}

do_maptile() {
    if is_running; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "generate map tile"
    fi
}

do_delete_maptile() {
    if [ -r "${REGION_MAPTILE}" ]; then
        rm "${REGION_MAPTILE}"
    fi
}

do_multi() {
    cmd=$1
    if [ "$1" == "" ]; then
        echo "No command given"
        exit
    fi
    if [ ! "$2" == "force" ]; then
        read -p "${cmd} all sims? (y/n): "
        if [ ! "$REPLY" == "y" ]; then
            exit
        fi
    fi
    for simulator in ${REGIONS_DIR}/*; do
        filename=`basename ${simulator} .ini`
        ./simctl ${cmd} ${filename}
    done;
}

check_user
case "$1" in
    start)
        if [ $# == 1 ]; then
            do_multi $1
            if [ -r "${MONITOR_LOCK}" ]; then
                rm "${MONITOR_LOCK}"
            fi
        else
            setup $2
            do_start
        fi
        ;;
    stop)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi $1
        else
            setup $2
            do_stop
        fi
        ;;
    kill)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi $1
        else
            setup $2
            do_kill
        fi
        ;;
    alert)
        if [ $# == 1 ]; then
            do_multi $1
        else
            setup $2
            do_alert "$3"
        fi
        ;;
    bluebox)
        if [ $# == 1 ]; then
            do_multi $1
        else
            setup
            do_bluebox "$3" $4
        fi
        ;;
    restart)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi stop
            sleep 3
            do_multi start
            if [ -r "${MONITOR_LOCK}" ]; then
                rm "${MONITOR_LOCK}"
            fi
        else
            setup $2
            do_stop
            # Take time for the pid file to clear
            sleep 3
            do_start
        fi
        ;;
    status)
        if [ $# == 1 ]; then
            do_multi $1 force
        else
            setup $2
            get_status
        fi
        ;;
    saveoar)
        setup $2
        do_saveoar "$3"
        ;;
    backup)
        if [ $# == 1 ]; then
            do_multi $1
        else
            setup $2
            do_backup
        fi
        ;;
    enable)
        setup $2
        do_enable
        ;;
    disable)
        setup $2
        do_disable
        if is_running; then
            do_stop
        fi
        ;;
    zap)
        setup $2
        do_zap
        ;;
    maptile)
        if [ $# == 1 ]; then
            do_multi $1
        else
            setup $2
            do_maptile
        fi
        ;;
    delete_maptile)
        if [ $# == 1 ]; then
            do_multi $1
        else
            setup $2
            do_delete_maptile
        fi
        ;;
    list)
        do_list $2
        ;;
    *)
        show_help
        exit 1
        ;;
esac

