#!/usr/bin/env bash
# Run a batched simctl command for all simulators in sims-enabled

OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
REGIONS_DIR="${OPENSIM_DIR}/etc/sims-enabled"

SIMCTL="${OPENSIM_DIR}/bin/simctl"
SCREEN="/usr/bin/screen"
GREP="/bin/grep"

mkdir -p "${OPENSIM_DIR}/var"

# We create this lock file when needing to suspend the watchdog
SIMAUTO_LOCK="${OPENSIM_DIR}/var/simauto.lock"

# Seconds delay between inworld alert and actual shutdown
ALERT_DELAY=120

# Seconds delay after stopping (for a clean shutdown)
STOP_DELAY=60

# Seconds delay after starting (to space out multiple sims starting)
START_DELAY=120

# Inworld warnings users get to see $ALERT_DELAY seconds before stopping or
# restarts. Note that you CAN'T use special characters such as \n (newline)
MSG_REGION_RESTART="ATTENTION: REGION RESTART - This region will be restarting within ${ALERT_DELAY} seconds. Please teleport elsewhere until we are back..."
MSG_REGION_STOP="ATTENTION: REGION MAINTENANCE - This region will be going down for maintenance within ${ALERT_DELAY} seconds. Please teleport elsewhere until we are back..."

show_help() {
    echo "Usage: `basename $0` [ start | stop | restart | reload | status | audit ]"
    echo "Starts or stops all simulators in ${REGIONS_DIR}"
}

is_running() {
    SIM=$1

    SCREENPID=`${SCREEN} -ls ${SIM} | grep -P "${SIM}\t" | cut -f1 -d'.' | sed 's/W//g'`
    if [ "${SCREENPID}" != "" ]; then
        return 0
    else
        return 1
    fi
}

do_start() {
    for simulator in ${REGIONS_DIR}/*; do
        simname=`basename ${simulator} .ini`
        if ! is_running ${simname}; then
            ${SIMCTL} start ${simname}
            sleep ${START_DELAY}
        fi
    done;
}

do_stop() {
    for simulator in ${REGIONS_DIR}/*; do
        simname=`basename ${simulator} .ini`
        if is_running ${simname}; then
            if [ "$1" == "NOW" ]; then
                # Stop immediately
                ${SIMCTL} stop ${simname}
            else
                # Stop with bluebox delay
                ${SIMCTL} bluebox ${simname} "${MSG_REGION_STOP}" ${ALERT_DELAY}
            fi
        fi
    done;
}

# Restarts sims sequentially, e.g. for loading new configuration
do_reload() {
    for simulator in ${REGIONS_DIR}/*; do
        simname=`basename ${simulator} .ini`
        if [ "$1" == "NOW" ]; then
            if is_running ${simname}; then
                ${SIMCTL} restart ${simname}
            else
                ${SIMCTL} start ${simname}
            fi
            sleep ${START_DELAY}
        else
            if is_running ${simname}; then
                ${SIMCTL} bluebox ${simname} "${MSG_REGION_STOP}" ${ALERT_DELAY}
            fi
            ${SIMCTL} start ${simname}
        fi
    done;
}

do_batch() {
    for simulator in ${REGIONS_DIR}/*; do
        simname=`basename ${simulator} .ini`
        ${SIMCTL} $1 ${simname}
    done;
}

case "$1" in
    start)
        touch "${SIMAUTO_LOCK}"
        do_start
        rm ${SIMAUTO_LOCK}
        ;;
    stop)
        touch "${SIMAUTO_LOCK}"
        do_stop $2
        # Deliberately don't remove lock
        ;;
    restart)
        touch "${SIMAUTO_LOCK}"
        do_stop $2
        if [ "$2" != "NOW" ]; then
            echo "Waiting until all sims have shut down.. (~${ALERT_DELAY}s)" 
            sleep ${ALERT_DELAY}
            sleep 30
        fi
        do_start
        rm ${SIMAUTO_LOCK}
        ;;
    reload)
        touch "${SIMAUTO_LOCK}"
        do_reload $2
        rm ${SIMAUTO_LOCK}
        ;;
    status)
        do_batch $1
        ;;
    audit)
        do_batch $1
        ;;
    saveoar)
        do_batch $1
        ;;
    *)
        show_help
        exit 1
        ;;
esac

