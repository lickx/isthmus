#!/usr/bin/env bash
# Original code by Dave Coyle (http://coyled.com)
# Tweaks by Gwyneth Llewelyn (http://gwynethllewelyn.net/)
# Total overhaul by lickx (https://github.com/lickx)

# Requires bash 4

# Get the root folder of the isthmus tree
export OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

ROBUST_DIR="${OPENSIM_DIR}/etc/robust.d"
if [ ! -d "${ROBUST_DIR}" ]; then
    if [ -r "${OPENSIM_DIR}/etc/robust.ini" ]; then
        mkdir -p "${ROBUST_DIR}"
        mv "${OPENSIM_DIR}/etc/robust.ini" "${ROBUST_DIR}/99main.ini"
        echo "etc/robust.ini has been migrated to etc/robust.d/99main.ini"
        echo "For an example of a split-robust setup, see the config files in:"
        echo "share/grids/microgrid-hg/etc/robust.d"
    else
        echo "Grid services for this grid are not self-hosted but provided by a 3rd party"
        exit
    fi
fi

mkdir -p "${OPENSIM_DIR}/var/log"
mkdir -p "${OPENSIM_DIR}/var/fsassets/assets"
mkdir -p "${OPENSIM_DIR}/var/fsassets/main"
mkdir -p "${OPENSIM_DIR}/var/pid/robust"

# We create this lock file when needing to suspend the watchdog
MONITOR_LOCK="${OPENSIM_DIR}/var/suspend-monitor.lock"

# Install isthmus config file if not already there, and then source it
if [ ! -f "${OPENSIM_DIR}/etc/isthmus.conf" ]; then
    cp "${OPENSIM_DIR}/share/common/etc/isthmus.conf" "${OPENSIM_DIR}/etc"
fi
source "${OPENSIM_DIR}/etc/isthmus.conf"

if [ -z "${ISTHMUS_HOSTNAME}" ]; then
    ISTHMUS_HOSTNAME=`hostname -f`
fi
export ISTHMUS_HOSTNAME

export ISTHMUS_IP=`hostname -I | cut -d' ' -f1`

if [ -n "${WSL_DISTRO_NAME}" ]; then
    # Warn issue #7 on WSL - https://github.com/lickx/isthmus/issues/7
    if [ ! -w /var/run/screen ]; then
        mkdir -p ~/.screen
        chmod 700 ~/.screen
        export SCREENDIR="$HOME/.screen"
    fi
fi

show_help() {
    echo -e "`basename $0` - Control grid services\n"
    echo "start                         Start all robust instances"
    echo "start <instance>              Start robust"
    echo "stop                          Stop all robust instances"
    echo "stop <instance>               Stop robust"
    echo "kill <instance>               Stop by sending SIGHUP (unclean)"
    echo "restart <instance>            Issues a stop, then start command"
    echo "status <instance>             Returns status"
}

do_log() {
    touch "${OPENSIM_DIR}/var/log/isthmus.log"
    logline="`date --iso-8601=seconds` - robust - $1"
    echo "${logline}" >> "${OPENSIM_DIR}/var/log/isthmus.log"
}

check_user() {
    if [ `whoami` == 'root' ]; then
        echo "Refusing to run as root"
        exit 1
    fi
}

is_running() {
    if [ -r "${ROBUST_PIDFILE}" ]; then
        ROBUST_PID=`cat "${ROBUST_PIDFILE}"`
        if ps -p "${ROBUST_PID}" > /dev/null
        then
            return 0
        fi
        # Process not running, clean up pid file
        rm -f "${ROBUST_PIDFILE}"
        return 1
    else
        return 1
    fi
}

get_port() {
    NETWORK_PORT=`grep -Ew "\s+?[pP]ort\s+?=" "${INSTANCE_INIFILE}" | cut -f2 -d'=' | sed 's/\"//g' | xargs`
    if ! [[ "${NETWORK_PORT}" =~ '^[0-9]+$' ]] ; then
        # not a number but a CONST. lookup the name of the variable:
        NETWORK_PORT_VAR=`echo "${NETWORK_PORT}" | cut -f2 -d'|' | sed 's/}//g'`
        # lookup the value of the variable:
        PORT=`grep -Ew "\s+?${NETWORK_PORT_VAR}\s+?=" "${INSTANCE_INIFILE}" | cut -f2 -d'=' | sed 's/\"//g' | xargs`
    else
        PORT=${NETWORK_PORT}
    fi
}

get_status() {
    if is_running; then
        echo "${INSTANCE} - online (${PORT})"
        return 1
    else
        echo "${INSTANCE} - offline"
        return 0 
    fi
}

setup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        INSTANCE=$1
    fi

    INSTANCE_INIFILE="${ROBUST_DIR}/${INSTANCE}.ini"
    SCREENNAME="`basename ${OPENSIM_DIR}`-${INSTANCE}"

    if [ ! -r "${INSTANCE_INIFILE}" ]; then
        echo "${INSTANCE}.ini does not exist within etc/robust.d"
        exit
    fi
    get_port

    mkdir -p "${OPENSIM_DIR}/var/log"
    # Combine logfile for duplicate robusts (like inventory0..n):
    INSTANCE_NO_NUM=${INSTANCE//[0-9]/}
    export ROBUST_LOGFILE="${OPENSIM_DIR}/var/log/robust-${INSTANCE_NO_NUM}.log"
    export ROBUST_STATS_LOGFILE="${OPENSIM_DIR}/var/log/robust_stats.log"

    mkdir -p "${OPENSIM_DIR}/var/pid/robust"
    export ROBUST_PIDFILE="${OPENSIM_DIR}/var/pid/robust/${INSTANCE}.pid"
}

do_start() {
    if is_running; then
        echo "[${INSTANCE}] Already started"
        return 1
    fi

    which dotnet > /dev/null
    if [ $? -ne 0 ]; then
        echo ".NET is not installed or 'dotnet' is not in the path"
        do_log ".NET is not installed or 'dotnet' is not in the path"
        exit
    fi

    export DOTNET_CLI_TELEMETRY_OPTOUT=1
    export LC_ALL=C
    ulimit -n 4096
    cd "${OPENSIM_DIR}/runtime/bin" && screen -S ${SCREENNAME} -d -m -l \
        dotnet ./Robust.dll \
            -inifile="${INSTANCE_INIFILE}" \
            -logfile="${ROBUST_LOGFILE}"

    echo -n "[${INSTANCE}] Starting"
    STARTTIME=0
    while :
    do
        sleep 1
        STARTTIME=$((STARTTIME + 1))
        echo -n "."
        if is_running; then
            echo " started"
            return
        elif [ ${STARTTIME} -ge 6 ]; then
            echo " failed!"
            do_log "Instance ${INSTANCE} has problems with starting"
            return
        fi
    done
}

do_kill() {
    if is_running; then
        kill -9 ${ROBUST_PID}
        rm -f "${ROBUST_PIDFILE}"
        echo "[${INSTANCE}] Killed"
    fi
}

do_stop() {
    if is_running; then
        echo -n "[${INSTANCE}] Stopping"
        kill -SIGTERM ${ROBUST_PID}
        STOPTIME=0
        while :
        do
            sleep 1
            STOPTIME=$((STOPTIME + 1))
            echo -n "."
            if ! is_running; then
                echo " stopped"
                return 0
            elif [ ${STOPTIME} -ge 20 ]; then
                echo " killing"
                do_kill
                do_log "Instance ${INSTANCE} took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${INSTANCE}] Not running"
        return 1
    fi
}

do_multi() {
    cmd=$1
    if [ -z "${cmd}" ]; then
        echo "No command given"
        exit
    fi
    if [ ! "$2" == "force" ]; then
        read -p "${cmd} all robust instances? (y/n): "
        if [ ! "$REPLY" == "y" ]; then
            exit
        fi
    fi
    if [ "$2" == "reverse" ]; then
        filelist=`ls ${OPENSIM_DIR}/etc/robust.d/*.ini | tac`
    else
        filelist=`ls ${OPENSIM_DIR}/etc/robust.d/*.ini`
    fi
    for r in ${filelist}; do
        filename=`basename ${r} .ini`
        ./robust ${cmd} ${filename}
    done;
}

do_console() {
    screen -r ${SCREENNAME}
}

check_user
case "$1" in
    start)
        if [ $# == 1 ]; then
            do_multi $1
            rm -f "${MONITOR_LOCK}"
        else
            setup $2
            do_start
        fi
        ;; 
    stop)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi $1 reverse
        else
            setup $2
            do_stop
        fi
        ;;
    kill)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi $1 reverse
        else
            setup $2
            do_kill
        fi
        ;;
    restart)
        if [ $# == 1 ]; then
            touch "${MONITOR_LOCK}"
            do_multi restart
            rm -f "${MONITOR_LOCK}"
        else
            setup $2
            do_stop
            # Take time for the pid file to clear
            sleep 3
            do_start
        fi
        ;;
    status)
        if [ $# == 1 ]; then
            do_multi $1 force
        else
            setup $2
            get_status
        fi
        ;;
    console)
        setup $2
        do_console
        ;;
    *)
        show_help
        exit 1
        ;;
esac

